
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rcaiman"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "rcaiman-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('rcaiman')
Loading required package: raster
Loading required package: sp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("apply_thr")
> ### * apply_thr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: apply_thr
> ### Title: Apply threshold
> ### Aliases: apply_thr
> 
> ### ** Examples
> 
> r <- read_caim()
> apply_thr(r$Blue, 120)
class      : RasterLayer 
dimensions : 1490, 1490, 2220100  (nrow, ncol, ncell)
resolution : 1, 1  (x, y)
extent     : 0, 1490, 0, 1490  (xmin, xmax, ymin, ymax)
crs        : NA 
source     : memory
names      : layer 
values     : 0, 1  (min, max)

> ## Not run: 
> ##D # This function is useful in combination with the ‘autothresholdr’
> ##D package. For examples:
> ##D require(autothresholdr)
> ##D thr <- auto_thresh(r$Blue[], "IsoData")[1]
> ##D bin <- apply_thr(r$Blue, thr)
> ##D plot(bin)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("apply_thr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("azimuth_image")
> ### * azimuth_image
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: azimuth_image
> ### Title: Azimuth image
> ### Aliases: azimuth_image
> 
> ### ** Examples
> 
> z <- zenith_image(1490, lens("Nikon_FCE9"))
> azimuth_image(z)
class      : RasterLayer 
dimensions : 1490, 1490, 2220100  (nrow, ncol, ncell)
resolution : 1, 1  (x, y)
extent     : 0, 1490, 0, 1490  (xmin, xmax, ymin, ymax)
crs        : NA 
source     : memory
names      : layer 
values     : 0.03847936, 359.9615  (min, max)

> plot(z)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("azimuth_image", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calc_diameter")
> ### * calc_diameter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calc_diameter
> ### Title: Calculate diameter
> ### Aliases: calc_diameter
> 
> ### ** Examples
> 
> # Nikon D50 and Fisheye Nikkor 10.5 mm lens
> calc_diameter(lens("Nikkor_10.5_mm"), 1202, 53)
[1] 3754
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calc_diameter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calc_zenith_raster_coordinates")
> ### * calc_zenith_raster_coordinates
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calc_zenith_raster_coordinates
> ### Title: Calculate zenith raster coordinates
> ### Aliases: calc_zenith_raster_coordinates
> 
> ### ** Examples
> 
> path <- system.file("external/points_over_perimeter.csv",
+                     package = "rcaiman")
> calc_zenith_raster_coordinates(path)
     col       row      
[1,] numeric,2 numeric,2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calc_zenith_raster_coordinates", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calibrate_lens")
> ### * calibrate_lens
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calibrate_lens
> ### Title: Calibrate lens
> ### Aliases: calibrate_lens
> 
> ### ** Examples
> 
> path <- system.file("external/Results_calibration.csv", package = "rcaiman")
> calibration <- calibrate_lens(path)
> calibration$lens_coef
[1]  0.62791790  0.03994280 -0.02190164
> calibration$max_theta
       1 
95.20792 
> calibration$max_thera_px
NULL
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calibrate_lens", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("enhance_caim")
> ### * enhance_caim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: enhance_caim
> ### Title: Enhance canopy image
> ### Aliases: enhance_caim
> 
> ### ** Examples
> 
> ## Not run: 
> ##D caim <- read_caim()
> ##D caim <- normalize(caim, 0, 255)
> ##D z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
> ##D m <- !is.na(z)
> ##D ecaim <- enhance_caim(caim, m)
> ##D plot(ecaim)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("enhance_caim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("expand_noncircular")
> ### * expand_noncircular
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: expand_noncircular
> ### Title: Expand non-circular
> ### Aliases: expand_noncircular
> 
> ### ** Examples
> 
> ## Not run: 
> ##D    my_file <- path.expand("~/DSC_2881.JPG")
> ##D    download.file("https://osf.io/x8urg/download", my_file,
> ##D                method = "auto", mode = "wb"
> ##D    )
> ##D 
> ##D    r <- read_caim(my_file)
> ##D    diameter <- calc_diameter(lens("Nikkor_10.5_mm"), 1202, 53)
> ##D    zenith_colrow <- c(1503, 998)
> ##D    z <- zenith_image(diameter, lens("Nikkor_10.5_mm"))
> ##D    r <- expand_noncircular(r, z, zenith_colrow)
> ##D    plot(r)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("expand_noncircular", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("extract_feature")
> ### * extract_feature
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract_feature
> ### Title: Extract feature
> ### Aliases: extract_feature
> 
> ### ** Examples
> 
> ## Not run: 
> ##D r <- read_caim()
> ##D z <- zenith_image(ncol(r),lens("Nikon_FCE9"))
> ##D a <- azimuth_image(z)
> ##D g <- sky_grid_segmentation(z, a, 10)
> ##D extract_feature(r$Blue, g, return_raster = FALSE)
> ##D plot(extract_feature(r$Blue, g, return_raster = FALSE))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract_feature", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("find_sky_dns")
> ### * find_sky_dns
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: find_sky_dns
> ### Title: Find sky DNs
> ### Aliases: find_sky_dns
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path <- system.file("external/4_D_2_DSCN4502.JPG", package = "rcaiman")
> ##D caim <- read_caim(path, c(1280, 960) - 745, 745 * 2, 745 * 2)
> ##D z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
> ##D a <- azimuth_image(z)
> ##D blue <- gbc(caim$Blue)
> ##D bin <- find_sky_dns(blue, z, a)
> ##D plot(bin)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("find_sky_dns", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fit_cone_shaped_model")
> ### * fit_cone_shaped_model
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit_cone_shaped_model
> ### Title: Fit cone shaped model
> ### Aliases: fit_cone_shaped_model
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path <- system.file("external/4_D_2_DSCN4502.JPG", package = "rcaiman")
> ##D r <- read_caim(path, c(1280, 960) - 745, 745 * 2, 745 * 2)
> ##D z <- zenith_image(ncol(r), lens("Nikon_FCE9"))
> ##D a <- azimuth_image(z)
> ##D blue <- gbc(r$Blue)
> ##D bin <- find_sky_dns(blue, z, a)
> ##D sky <- fit_cone_shaped_model(blue, z, a, bin, parallel = FALSE)
> ##D plot(sky$image)
> ##D persp(sky$image, theta = 90, phi = 0) #a flipped rounded cone!
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit_cone_shaped_model", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fit_trend_surface")
> ### * fit_trend_surface
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit_trend_surface
> ### Title: Fit a trend surface to sky digital numbers
> ### Aliases: fit_trend_surface
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path <- system.file("external/4_D_2_DSCN4502.JPG", package = "rcaiman")
> ##D r <- read_caim(path, c(1280, 960) - 745, 745 * 2, 745 * 2)
> ##D z <- zenith_image(ncol(r), lens("Nikon_FCE9"))
> ##D a <- azimuth_image(z)
> ##D blue <- gbc(r$Blue)
> ##D bin <- find_sky_dns(blue, z, a)
> ##D sky <- fit_cone_shaped_model(blue, z, a, bin, parallel = FALSE)
> ##D m <- mask_hs(z, 0, 80)
> ##D sky <- fit_trend_surface(blue, bin, m, filling_source = sky$image)
> ##D plot(sky$image)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit_trend_surface", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gbc")
> ### * gbc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gbc
> ### Title: Gamma back correction
> ### Aliases: gbc
> 
> ### ** Examples
> 
> r <- read_caim()
> gbc(r)
class      : RasterBrick 
dimensions : 1490, 1490, 2220100, 3  (nrow, ncol, ncell, nlayers)
resolution : 1, 1  (x, y)
extent     : 0, 1490, 0, 1490  (xmin, xmax, ymin, ymax)
crs        : NA 
source     : memory
names      : Red, Green, Blue 
min values :   0,     0,    0 
max values :   1,     1,    1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gbc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lens")
> ### * lens
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lens
> ### Title: Lens database
> ### Aliases: lens
> 
> ### ** Examples
> 
> lens("equidistant")
[1] 0.6366198
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lens", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("local_fuzzy_thresholding")
> ### * local_fuzzy_thresholding
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: local_fuzzy_thresholding
> ### Title: local fuzzy thresholding
> ### Aliases: local_fuzzy_thresholding
> 
> ### ** Examples
> 
> ## Not run: 
> ##D caim <- read_caim()
> ##D caim <- normalize(caim, 0, 255)
> ##D z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
> ##D target_color <- colorspace::sRGB(matrix(c(0.529, 0.808, 0.921), ncol = 3))
> ##D mem <- membership_to_color(caim, target_color)
> ##D m <- !is.na(z)
> ##D mem_thr <- local_fuzzy_thresholding(mean(caim), m,  mem$membership_to_grey)
> ##D plot(mem_thr)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("local_fuzzy_thresholding", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mask_hs")
> ### * mask_hs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mask_hs
> ### Title: Mask hemisphere
> ### Aliases: mask_hs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D z <- zenith_image(1000, lens())
> ##D a <- azimuth_image(z)
> ##D m1 <- mask_hs(z, 20, 70)
> ##D plot(m1)
> ##D m2 <- mask_hs(a, 330,360)
> ##D plot(m2)
> ##D plot(m1 & m2)
> ##D plot(m1 | m2)
> ##D 
> ##D # if you want 15 degress at each side of 0
> ##D m1 <- mask_hs(a, 0, 15)
> ##D m2 <- mask_hs(a, 345, 360)
> ##D plot(m1 | m2)
> ##D 
> ##D # better use this
> ##D plot(!is.na(z))
> ##D # instead of this
> ##D plot(mask_hs(z, 0, 90))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mask_hs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("masking")
> ### * masking
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: masking
> ### Title: Image masking
> ### Aliases: masking masking,RasterLayer-method
> ###   masking,RasterStackBrick-method
> 
> ### ** Examples
> 
>  r <- read_caim()
>  z <- zenith_image(ncol(r), lens())
>  a <- azimuth_image(z)
>  m <- mask_hs(z, 20, 70) & mask_hs(a, 90, 180)
> 
>  masked_caim <-  masking(normalize(r, 0, 255), m)
>  plotRGB(masked_caim * 255)
> ## Not run: 
> ##D  masked_bin <- masking(apply_thr(r$Blue, 125), m)
> ##D  plotRGB(masked_bin * 255)
> ##D  
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("masking", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("membership_to_color")
> ### * membership_to_color
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: membership_to_color
> ### Title: Compute membership to a color
> ### Aliases: membership_to_color
> 
> ### ** Examples
> 
> caim <- read_caim()
> caim <- normalize(caim, 0, 255)
> z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
> target_color <- colorspace::sRGB(matrix(c(0.529, 0.808, 0.921), ncol = 3))
> mem <- membership_to_color(caim, target_color)
> plot(mem)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("membership_to_color", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("normalize")
> ### * normalize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: normalize
> ### Title: Normalize data
> ### Aliases: normalize
> 
> ### ** Examples
> 
> normalize(read_caim(), 0, 255)
class      : RasterBrick 
dimensions : 1490, 1490, 2220100, 3  (nrow, ncol, ncell, nlayers)
resolution : 1, 1  (x, y)
extent     : 0, 1490, 0, 1490  (xmin, xmax, ymin, ymax)
crs        : NA 
source     : memory
names      : Red, Green, Blue 
min values :   0,     0,    0 
max values :   1,     1,    1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("normalize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ootb_mblt")
> ### * ootb_mblt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ootb_mblt
> ### Title: Out-of-the-box model-based local thresholding
> ### Aliases: ootb_mblt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D path <- system.file("external/4_D_2_DSCN4502.JPG", package = "rcaiman")
> ##D r <- read_caim(path, c(1280, 960) - 745, 745 * 2, 745 * 2)
> ##D z <- zenith_image(ncol(r), lens("Nikon_FCE9"))
> ##D a <- azimuth_image(z)
> ##D blue <- gbc(r$Blue)
> ##D bin <- ootb_mblt(blue, z, a)
> ##D plot(bin$bin)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ootb_mblt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_bin")
> ### * read_bin
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_bin
> ### Title: Read binarized images
> ### Aliases: read_bin
> 
> ### ** Examples
> 
> ## Not run: 
> ##D z <- zenith_image(1000, lens())
> ##D m <- !is.na(z)
> ##D write_bin(m, "mask")
> ##D m_from_disk <- read_bin("mask.tif")
> ##D plot(m - m_from_disk)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_bin", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read_caim")
> ### * read_caim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read_caim
> ### Title: Read a canopy image from a file
> ### Aliases: read_caim read_caim,character-method read_caim,missing-method
> 
> ### ** Examples
> 
> # This is the example image
> r <- read_caim()
> plotRGB(r)
> 
> # This is also the example
> path <- system.file("external/b4_2_5724.jpg", package = "rcaiman")
> # the zenith raster coordinates can be easily transformed to the "upper_left"
> # argument by subtracting from it the radius expressed in pixels.
> zenith_colrow <- c(1280, 960)
> diameter_px <- 1490
> r <- read_caim(path,
+                upper_left = zenith_colrow - diameter_px/2,
+                width = diameter_px,
+                height = diameter_px)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read_caim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regional_thresholding")
> ### * regional_thresholding
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regional_thresholding
> ### Title: Regional thresholding
> ### Aliases: regional_thresholding
> 
> ### ** Examples
> 
> r <- read_caim()
> blue <- gbc(r$Blue)
> z <- zenith_image(ncol(r), lens("Nikon_FCE9"))
> rings <- rings_segmentation(z, 10)
> bin <- regional_thresholding(blue, rings, "Diaz2018", -8, 0.5, 0.9)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regional_thresholding", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("reproject_to_equidistant")
> ### * reproject_to_equidistant
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: reproject_to_equidistant
> ### Title: Reproject to equidistant
> ### Aliases: reproject_to_equidistant
> ###   reproject_to_equidistant,RasterLayer-method
> ###   reproject_to_equidistant,RasterStackBrick-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D caim <- read_caim()
> ##D caim <- normalize(caim, 0, 255)
> ##D z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
> ##D a <- azimuth_image(z)
> ##D bin <- apply_thr(caim$Blue, 0.5)
> ##D bin_equi <- reproject_to_equidistant(bin, z, a, radius = 400)
> ##D bin_equi <- apply_thr(bin_equi, 0.5)
> ##D plot(bin_equi)
> ##D write_bin(bin_equi, "bin") #ready for CIMES, GLA, CAN-EYE, etc.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("reproject_to_equidistant", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rings_segmentation")
> ### * rings_segmentation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rings_segmentation
> ### Title: Rings segmentation
> ### Aliases: rings_segmentation
> 
> ### ** Examples
> 
> z <- zenith_image(1490, lens())
> rings <- rings_segmentation(z, 15)
> plot(rings == 1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rings_segmentation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sectors_segmentation")
> ### * sectors_segmentation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sectors_segmentation
> ### Title: Sectors segmentation
> ### Aliases: sectors_segmentation
> 
> ### ** Examples
> 
> z <- zenith_image(1490, lens())
> a <- azimuth_image(z)
> sectors <- sectors_segmentation(a, 15)
> plot(sectors == 1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sectors_segmentation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sky_grid_segmentation")
> ### * sky_grid_segmentation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sky_grid_segmentation
> ### Title: Sky grid segmentation
> ### Aliases: sky_grid_segmentation
> 
> ### ** Examples
> 
> z <- zenith_image(1490, lens())
> a <- azimuth_image(z)
> g <- sky_grid_segmentation(z, a, 15)
> plot(g == 36009)
> ## Not run: 
> ##D g <- sky_grid_segmentation(z, a, 15, sequential = TRUE)
> ##D plot(g, col = sample(rainbow(length(raster::unique(g)))))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sky_grid_segmentation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("test_lens_coef")
> ### * test_lens_coef
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: test_lens_coef
> ### Title: Test lens projection functions
> ### Aliases: test_lens_coef
> 
> ### ** Examples
> 
> test_lens_coef(lens("Nikon_FCE9"))
Test passed 
> test_lens_coef(2 / pi)
Test passed 
> test_lens_coef(c(1.06065, -0.49054, 0.14044))
Test passed 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("test_lens_coef", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("thr_image")
> ### * thr_image
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: thr_image
> ### Title: Threshold image
> ### Aliases: thr_image
> 
> ### ** Examples
> 
> thr_image(gbc(125), -8, 1)
[1] 0.1769871
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("thr_image", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("write_bin")
> ### * write_bin
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: write_bin
> ### Title: Write binarized images
> ### Aliases: write_bin
> 
> ### ** Examples
> 
> ## Not run: 
> ##D z <- zenith_image(1000, lens())
> ##D m <- !is.na(z)
> ##D write_bin(m, "mask")
> ##D m_from_disk <- read_bin("mask.tif")
> ##D plot(m - m_from_disk)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("write_bin", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("write_caim")
> ### * write_caim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: write_caim
> ### Title: Write canopy image
> ### Aliases: write_caim
> 
> ### ** Examples
> 
> ## Not run: 
> ##D require(magrittr)
> ##D caim <- read_caim() %>% normalize(., 0, 255)
> ##D write_caim(caim * 2^8, "test_8bit", 8)
> ##D write_caim(caim * 2^16, "test_16bit", 16)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("write_caim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("zenith_image")
> ### * zenith_image
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: zenith_image
> ### Title: Zenith image
> ### Aliases: zenith_image
> 
> ### ** Examples
> 
> z <- zenith_image(1490, lens("Nikon_FCE9"))
> plot(z)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("zenith_image", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  33.91 1.81 36.07 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
