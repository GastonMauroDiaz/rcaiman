% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_cie_sky_model.R
\name{fit_cie_sky_model}
\alias{fit_cie_sky_model}
\title{Fit CIE sky model}
\usage{
fit_cie_sky_model(
  r,
  z,
  a,
  sky_marks,
  sun_mark,
  std_sky_no = NULL,
  general_sky_type = NULL,
  use_window = TRUE,
  twilight = TRUE,
  rmse = FALSE,
  method = "BFGS"
)
}
\arguments{
\item{r}{\linkS4class{RasterLayer}. A normalized greyscale image. Typically,
the blue channel extracted from an hemispherical photographs. Please see
\code{\link{read_caim}} and \code{\link{normalize}}.}

\item{z}{\linkS4class{RasterLayer}. The result of a call to
\code{\link{zenith_image}}.}

\item{a}{\linkS4class{RasterLayer}. The result of a call to
\code{\link{azimuth_image}}.}

\item{sky_marks}{An object of class data.frame. The result of a call to
\code{\link{extract_sky_marks}}.}

\item{sun_mark}{An object of class list. The result of a call to
\code{\link{extract_sun_mark}}.}

\item{std_sky_no}{Numeric vector. Standard sky number from Table 1 from
\insertCite{Li2016;textual}{rcaiman}.}

\item{general_sky_type}{Character vector of length one. "Overcast", "Clear",
or "Partly cloudy". See Table 1 from \insertCite{Li2016;textual}{rcaiman}.}

\item{use_window}{Logical vector of length one. If \code{TRUE}, a 3 by 3
window will be used to extract the sky digital number from \code{r}.}

\item{twilight}{Logical vector of length one. If it is \code{TRUE} and the
initial standard parameters belong to the "Clear" general sky type, sun
zenith angles from 90 to 96 degrees will be tested (civic twilight). This
is necessary since \code{\link{extract_sun_mark}} would mistakenly
recognize the gravity center of what can be seen of the solar corona as the
solar disk.}

\item{rmse}{Logical vector of length one. If it is \code{TRUE}, the criteria
for selecting the best sky model is to choose the one with lest root mean
square error calculated from the sample (sky marks). Otherwise, the
criteria is to evaluate the whole hemisphere by calculating the ratio of
\code{r} to the sky model, then square it, and selecting the sky model that
produce the least value.}

\item{method}{Optimization method to use. See \code{\link{optim}}.}
}
\description{
Fit CIE sky model using data from real hemispherical photographs.
}
\details{
This function use maximum likelihood to estimate the coefficients of the CIE
sky model that fit best to data sampled from a real image. The result include
the output produced by \code{\link[bbmle]{mle2}}, the 5 model coefficients,
observed and predicted values, the sun coordinates (zenith and azimuth angle
in degrees), the relative luminance calculated for every pixel using the
estimated coefficients and corresponding sun coordinate, the digital number
at the zenith, and the description of the standard sky from which the initial
coefficients were drawn. See \insertCite{Li2016;textual}{rcaiman} to known
more about these coefficients.

This function assume an hemispherical image as input. It is based on
\insertCite{Lang2010;textual}{rcaiman}. In theory, the better result would be
obtained with data showing a linear relation between digital numbers and the
amount of light reaching the sensor. However, the CIE sky model is indeed the
adjoin of two mathematical models, one controlling the gradation between the
zenith and the horizon (two parameters), and the other controlling the
gradation originated at the solar disk (three parameters). This make the CIE
model capable of cope with any non-linearity.

Ultimately, if the goal is to calculate the ratio of canopy DN to sky DN, if
the latter is accurately constructed, any non-linearity will be canceled.
Please, see \code{\link{interpolate_dns}} for further considerations.
}
\examples{
\dontrun{
my_file <- path.expand("~/DSCN5548.JPG")
download.file("https://osf.io/kp7rx/download", my_file,
              method = "auto", mode = "wb")
r <- read_caim(my_file,
               c(1280, 960) - 745,
               745 * 2,
               745 * 2)
z <- zenith_image(ncol(r), lens("Nikon_FCE9"))
a <- azimuth_image(z)
g <- sky_grid_segmentation(z, a, 10)
blue <- gbc(r$Blue)
bin <- ootb_mblt(blue, z, a, is_horizon_visible = TRUE)$bin
sky_marks <- extract_sky_marks(blue, bin, g)
sun_mark <- extract_sun_mark(blue, bin, z, a, g)
model <- fit_cie_sky_model(blue, z, a, sky_marks, sun_mark)
plot(model$relative_luminance)
}
}
\references{
\insertRef{Li2016}{rcaiman}
}
\seealso{
Other cie sky model functions: 
\code{\link{cie_sky_model_raster}()}
}
\concept{cie sky model functions}
