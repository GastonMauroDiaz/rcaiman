% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ootb_fit_cie_sky_model.R
\name{ootb_fit_cie_sky_model}
\alias{ootb_fit_cie_sky_model}
\title{Out-of-the-box fit CIE sky model}
\usage{
ootb_fit_cie_sky_model(r, z, a, m, bin, gs, min_spherical_dist)
}
\arguments{
\item{r}{\linkS4class{SpatRaster}. A normalized greyscale image. Typically, the
blue channel extracted from a canopy photograph. Please see \code{\link[=read_caim]{read_caim()}}
and \code{\link[=normalize_minmax]{normalize_minmax()}}.}

\item{z}{\linkS4class{SpatRaster} built with \code{\link[=zenith_image]{zenith_image()}}.}

\item{a}{\linkS4class{SpatRaster} built with \code{\link[=azimuth_image]{azimuth_image()}}.}

\item{m}{\linkS4class{SpatRaster}. A mask, check \code{\link[=select_sky_vault_region]{select_sky_vault_region()}}.}

\item{bin}{\linkS4class{SpatRaster}. This should be a preliminary binarization of
\code{r} useful for masking pixels that are very likely pure sky pixels.}

\item{gs}{An object of the class \emph{list}. A list with the output of
\code{\link[=sky_grid_segmentation]{sky_grid_segmentation()}}, see the example.}

\item{min_spherical_dist}{Numeric vector. These values will be passed to the
\code{min_dist} argument of \code{\link[=vicinity_filter]{vicinity_filter()}}.}
}
\value{
A \emph{list} with the following components:
\itemize{
\item An object of the \linkS4class{SpatRaster}) with the predicted digital
number values.
\item The output produced by \code{\link[=fit_cie_sky_model]{fit_cie_sky_model()}}.
\item The output produced by \code{\link[=validate_cie_sky_model]{validate_cie_sky_model()}}.
\item The \code{dist_to_black} argument used in \code{\link[=extract_sky_points]{extract_sky_points()}}.
\item The \code{min_spherical_dist} argument used to filter the sky points.
\item The \code{sky_points} argument used in \code{\link[=extract_rel_radiance]{extract_rel_radiance()}}.
}
}
\description{
This function is a hard-coded version of a pipeline that uses these main
functions \code{\link[=extract_sun_coord]{extract_sun_coord()}}, \code{\link[=extract_sky_points]{extract_sky_points()}}, \code{\link[=sor_filter]{sor_filter()}},
\code{\link[=extract_rel_radiance]{extract_rel_radiance()}}, \code{\link[=fit_cie_sky_model]{fit_cie_sky_model()}}, and
\code{\link[=validate_cie_sky_model]{validate_cie_sky_model()}}.
}
\details{
This function is part of the efforts to automate the method proposed by
\insertCite{Lang2010;textual}{rcaiman}. A paper for thoroughly presenting and
testing this pipeline is under preparation.
}
\examples{
\dontrun{
caim <- read_caim()
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)
m <- !is.na(z)

r <- caim$Blue

bin <- regional_thresholding(r, rings_segmentation(z, 30),
                             method = "thr_isodata")
g <- sky_grid_segmentation(z, a, 10)
sun_coord <- extract_sun_coord(r, z, a, bin, g)
sun_coord$zenith_azimuth

.a <- azimuth_image(z, orientation = sun_coord$zenith_azimuth[2]+90)
seg <- sectors_segmentation(.a, 180) * rings_segmentation(z, 30)
bin <- regional_thresholding(r, seg, method = "thr_isodata")

mx <- optim_normalize(caim, bin)
caim <- normalize_minmax(caim, mx = mx, force_range = TRUE)
ecaim <- enhance_caim(caim, m, polarLAB(50, 17, 293))
bin <- apply_thr(ecaim, thr_isodata(ecaim[m]))
bin <- bin & select_sky_vault_region(z, 0, 85)
plot(bin)

set.seed(7)
gs <- list(
  sky_grid_segmentation(z, a, 1.875, first_ring_different = TRUE),
  sky_grid_segmentation(z, a, 6, first_ring_different = TRUE),
  sky_grid_segmentation(z, a, 10, first_ring_different = TRUE)
)

sky <- ootb_fit_cie_sky_model(r, z, a, m, bin , gs,
                              min_spherical_dist = seq(3, 9, 3))

sky$sky
plot(sky$sky)
sky$model_validation$rmse
plot(r/sky$sky>1.15)
plot(sky$model_validation$pred, sky$model_validation$obs)
abline(0,1)

plot(bin)
points(sky$sky_points$col, nrow(caim) - sky$sky_points$row, col = 2, pch = 10)
}
}
\references{
\insertAllCited{}
}
\seealso{
Other Sky Reconstruction Functions: 
\code{\link{cie_sky_image}()},
\code{\link{fit_cie_sky_model}()},
\code{\link{fit_coneshaped_model}()},
\code{\link{fit_trend_surface}()},
\code{\link{interpolate_sky_points}()},
\code{\link{ootb_interpolate_and_merge}()}
}
\concept{Sky Reconstruction Functions}
