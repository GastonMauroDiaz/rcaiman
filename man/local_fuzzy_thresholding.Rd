% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enhance_caim.R
\name{local_fuzzy_thresholding}
\alias{local_fuzzy_thresholding}
\title{local fuzzy thresholding}
\usage{
local_fuzzy_thresholding(lightness, m, mem, thr = NULL, fuzziness = NULL)
}
\arguments{
\item{lightness}{\linkS4class{RasterLayer}. A normalized greyscale image, the
lightness value. Values should range between zero and one --please see
\code{\link{normalize}}.}

\item{m}{\linkS4class{RasterLayer}. A mask. Usually, the result of a call to
\code{\link{mask_hs}}.}

\item{mem}{\linkS4class{RasterLayer}. It is the scale parameter of the
logistic membership function. Typically it is obtained with
\code{\link{membership_to_color}}.}

\item{thr}{Numeric vector of length one. Location parameter of the logistic
membership function. Use \code{NULL} (default) to order to estimate it
automatically with the function \code{\link{autoThr}}, method
\code{"IsoData"}.}

\item{fuzziness}{Numeric vector of length one. This number is a constant that
scale \code{mem}. Use \code{NULL} (default) to order to estimate it
automatically as the midpoint between the maximum and minimum values of
\code{lightness}.}
}
\description{
This function uses a threshold value as the location parameter of a logistic
membership function whose scale parameter depends on a variable, here named
\code{mem}. This dependence can be explained as follows: if the variable is
equal to \code{1}, then the membership function is as a threshold function
because the scale parameter is \code{0}; lowering the variable increases the
scale parameter, thus blurring the threshold because it decreases the
steepness of the curve. Since the variable is defined pixel by pixel, this
should be considered as a local fuzzy thresholding method.
}
\details{
Argument \code{m} can be used to affect the estimation of \code{thr}
  and \code{fuzziness}.
}
\examples{
\dontrun{
path <- system.file("external/b4_2_5724.jpg", package = "rcaiman")
caim <- read_caim(path, c(1280, 960) - 745, 745 * 2, 745 * 2)
caim <- normalize(caim, 0, 255)
target_color <- sRGB(matrix(c(0, 0, 1), ncol = 3))
mem <- membership_to_color(caim, target_color)
mem_thr <- local_fuzzy_thresholding(mean(caim), mem$membership_to_grey)
}
}
