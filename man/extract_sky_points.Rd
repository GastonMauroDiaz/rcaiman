% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_sky_points.R
\name{extract_sky_points}
\alias{extract_sky_points}
\title{Extract sky points}
\usage{
extract_sky_points(r, bin, g, dist_to_plant = 3, min_raster_dist = 3)
}
\arguments{
\item{r}{\linkS4class{SpatRaster}. A normalized greyscale image. Typically,
the blue channel extracted from an hemispherical photograph. Please see
\code{\link{read_caim}} and \code{\link{normalize}}.}

\item{bin}{\linkS4class{SpatRaster}. This should be a preliminary
binarization of \code{r} useful for masking pixels that are very likely
pure sky pixels.}

\item{g}{\linkS4class{SpatRaster}. The result of a call to
\code{\link{sky_grid_segmentation}} taking into account the camera, lens,
and pre-processing involved in obtaining the \code{r} argument.}

\item{dist_to_plant}{Numeric vector of length one or \code{NULL}.}

\item{min_raster_dist}{Numeric vector of length one or \code{NULL}. Distance
in pixels.}
}
\value{
An object of the class \emph{data.frame} with two columns named
  \emph{col}, \emph{row}.
}
\description{
Extract sky points for model fitting.
}
\details{
The \code{bin} argument should be any binarized image that masked out pure
canopy (non-gap) pixels and most of the mixed pixels, so that it establish a
region of interest dominated by pure sky pixels (a.k.a., gap pixels). This
argument can be obtained with \code{\link{find_sky_pixels}} and
\code{\link{find_sky_pixels_nonnull_criteria}}, among other alternatives.

This function will automatically sample sky pixels from the sky region
delimited by \code{bin}. The density and distribution of the sampling points
is controlled by the arguments \code{g}, \code{dist_to_plant}, and
\code{min_raster_dist}.

As first step, the digital number under the class \emph{Gap} --digital
numbers from \code{r} covered by pixels values equal to one on the \code{bin}
layer-- are evaluated to extract its maximum value per cell of \code{g}. But,
\code{dist_to_plant} allows users to establish a buffer zone for \code{bin}.

The final step filter these local maximum values as follow. The
\code{min_raster_dist} argument is a minimum distance threshold between
points that is applied in the raster space.

Using code \code{NULL} as argument skip the filtering step in question.
}
\examples{
\dontrun{
caim <- read_caim() \%>\% normalize()
z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
a <- azimuth_image(z)
sky_blue_sample <- crop(caim, ext(610,643,760,806))
sky_blue <- apply(sky_blue_sample[], 2, median) \%>\%
  as.numeric() \%>\%
  matrix(., ncol = 3) \%>\%
  sRGB()
ecaim <- enhance_caim(caim, !is.na(z), sky_blue, gamma = 2.2)
bin <- apply_thr(ecaim, 0.75)
g <- sky_grid_segmentation(z, a, 10)
r <- gbc(caim$Blue*255)
sky_points <- extract_sky_points(r, bin, g)
cells <- cellFromRowCol(z, sky_points$row, sky_points$col)
hist(r[cells][,1])
xy <- xyFromCell(z, cells)
plot(r)
plot(vect(xy), add = TRUE, col = 2)
}
}
\seealso{
Other Tools functions: 
\code{\link{defuzzify}()},
\code{\link{extract_feature}()},
\code{\link{extract_rl}()},
\code{\link{gbc}()},
\code{\link{masking}()},
\code{\link{normalize}()},
\code{\link{read_bin}()},
\code{\link{read_caim}()},
\code{\link{regional_thresholding}()},
\code{\link{write_bin}()},
\code{\link{write_caim}()}
}
\concept{Tools functions}
