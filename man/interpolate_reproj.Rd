% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate.R
\name{interpolate_reproj}
\alias{interpolate_reproj}
\title{Interpolate by reprojecting}
\usage{
interpolate_reproj(
  r,
  z,
  a,
  lens_coef,
  sky_marks,
  k = 3,
  p = 2,
  rmax = 20,
  use_window = TRUE
)
}
\arguments{
\item{r}{\linkS4class{RasterLayer}. A normalized greyscale image. Typically,
the blue channel extracted from an hemispherical photographs. Please see
\code{\link{read_caim}} and \code{\link{normalize}}.}

\item{z}{\linkS4class{RasterLayer}. The result of a call to
\code{\link{zenith_image}}.}

\item{a}{\linkS4class{RasterLayer}. The result of a call to
\code{\link{azimuth_image}}.}

\item{lens_coef}{Numeric vector. Polynomial coefficients
of the lens projection function.}

\item{sky_marks}{An object of class data.frame. The result of a call to
\code{\link{extract_sky_marks}}.}

\item{k}{Integer vector of length one. Number of k-nearest neighbors.}

\item{p}{Numeric vector of length one. Power for inverse-distance weighting.}

\item{rmax}{Numeric vector of length one. Maximum radius where to search for
knn.}

\item{use_window}{Logical vector of length one. If \code{TRUE}, a 3 by 3
window will be used to extract the sky digital number from \code{r}.}
}
\description{
Interpolate values from hemispherical photographs by reprojecting.
}
\details{
This function assume an hemispherical image as input. It is a version of
\code{\link{interpolate_as_is}} in which the interpolation takes place after
a cylindrical reprojection. To ensure hemispherical continuity, portions of
the reprojected image (30 degrees wide) are taken from the margin,
duplicated, translated, and mirrored as the task requires. The reprojected
image has resolution of one degree. Thus, \code{rmax} is in degrees.
}
\examples{
\dontrun{
my_file <- path.expand("~/DSCN5548.JPG")
download.file("https://osf.io/kp7rx/download", my_file,
              method = "auto", mode = "wb")
r <- read_caim(my_file,
               c(1280, 960) - 745,
               745 * 2,
               745 * 2)
z <- zenith_image(ncol(r), lens("Nikon_FCE9"))
a <- azimuth_image(z)
blue <- gbc(r$Blue)
bin <- ootb_mblt(blue, z, a)$bin
g <- sky_grid_segmentation(z, a, 10)
sky_marks <- extract_sky_marks(blue, bin, g)
sky <- interpolate_reproj(blue, z, a, lens("Nikon_FCE9"), sky_marks)
plot(sky)
}
}
\references{
\insertRef{Lang2010}{rcaiman}
}
