% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sor_filter.R
\name{sor_filter}
\alias{sor_filter}
\title{Statistical outlier removal (SOR) filter}
\usage{
sor_filter(
  sky_points,
  r = NULL,
  k = 20,
  rmax = 20,
  thr = 2,
  cutoff_side = "both",
  use_window = TRUE
)
}
\arguments{
\item{sky_points}{The \emph{data.frame} returned by \code{\link[=extract_rel_radiance]{extract_rel_radiance()}} or a
\emph{data.frame} with same structure and names.}

\item{r}{\linkS4class{SpatRaster}. An image with the same raster grid as the one
from which the argument \code{sky_points} was obtained. The function will
extract values from it using \code{sky_points}. If \code{NULL} is provided, the \emph{dn}
column from \code{sky_points} will be used instead.}

\item{k}{Numeric vector of length one. Number of k-nearest neighbors.}

\item{rmax}{Numeric vector of length one. The maximum radius for searching
k-nearest neighbors (knn). Points are projected onto a unit-radius sphere,
similar to the use of relative radius in image mapping. The spherical
distance is then calculated and used to filter out points farther than
\code{rmax}.The distance is expressed in degrees. If an insufficient number of
neighbors are found within the search radius, the point is retained due to
a lack of evidence for removal.}

\item{thr}{Numeric vector of length one. See
\insertCite{Leys2013;textual}{rcaiman}.}

\item{cutoff_side}{Character vector of length one. See
\insertCite{Leys2013;textual}{rcaiman}.}

\item{use_window}{Logical vector of length one. If \code{TRUE}, a \eqn{3 \times 3}
window will be used to extract the digital number from \code{r}.}
}
\value{
Logical vector of length equal to the number of row of argument
\code{sky_points}. If it is \code{TRUE}, the point is not an outlier, which is a
design decision to facilitate coding.
}
\description{
Statistical outlier removal (SOR) filter
}
\details{
This algorithm is based on the homonymous filter from the \href{https://pointclouds.org/}{PCL library}. Distances are computed on a spherical
surface and expressed in degrees to avoid distortions due to projection. The
number of neighbors used for evaluation is controlled by the \code{k} argument, while
the \code{rmax} argument sets the maximum search radius for finding these neighbors.
Points are projected onto a unit-radius sphere, similar to the use of relative
radius in image mapping. The spherical distance is then calculated, and points
farther than rmax are excluded from the neighbor set. If an insufficient
number of neighbors are found within rmax, the point is retained due to a
lack of evidence for removal. The decision criterion follows
\insertCite{Leys2013;textual}{rcaiman}:

\eqn{M - thr \times MAD < x_i < M + thr \times MAD}

where \eqn{x_i} is the value associated with a given sky point, \eqn{M} and
\eqn{MAD} are the median and median absolute deviation, respectively,
computed from the values associated with the neighbors of \eqn{x_i}, and
\eqn{thr} is the user-defined threshold.

The argument \code{cutoff_side} controls which side of the inequality is
testedâ€”either one side or both.
}
\examples{
\dontrun{
caim <- read_caim()
r <- caim$Blue
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)
m <- !is.na(z)
bin <- regional_thresholding(r, rings_segmentation(z, 30),
                             method = "thr_isodata")
bin <- bin & mask_hs(z, 0, 80)
g <- sky_grid_segmentation(z, a, 5, first_ring_different = TRUE)
sky_points <- extract_sky_points(r, bin, g,
                                 dist_to_black = 3,
                                 min_raster_dist = 10)
plot(r)
points(sky_points$col, nrow(caim) - sky_points$row, col = "green", pch = 10)
sky_points <- extract_rel_radiance(r, z, a, sky_points, no_of_points = NULL)
i <- sor_filter(sky_points$sky_points, k = 5, rmax = 20, thr = 2,
                cutoff_side = "left")
sky_points <- sky_points$sky_points[!i, c("row", "col")]
points(sky_points$col, nrow(caim) - sky_points$row, col = "red",
       pch = "X", cex = 1.5)
}
}
\references{
\insertAllCited{}
}
\seealso{
Other Tool Functions: 
\code{\link{calc_oor_index}()},
\code{\link{calc_sngd}()},
\code{\link{colorfulness}()},
\code{\link{correct_vignetting}()},
\code{\link{defuzzify}()},
\code{\link{display_caim}()},
\code{\link{expand_sky_points}()},
\code{\link{extract_dn}()},
\code{\link{extract_feature}()},
\code{\link{extract_rel_radiance}()},
\code{\link{extract_sky_points}()},
\code{\link{extract_sun_coord}()},
\code{\link{find_general_sky_type}()},
\code{\link{find_sky_pixels}()},
\code{\link{masking}()},
\code{\link{optim_dist_to_black}()},
\code{\link{optim_normalize}()},
\code{\link{percentage_of_clipped_highlights}()},
\code{\link{read_bin}()},
\code{\link{read_caim}()},
\code{\link{read_caim_raw}()},
\code{\link{read_ootb_sky_model}()},
\code{\link{write_bin}()},
\code{\link{write_caim}()},
\code{\link{write_ootb_sky_model}()}
}
\concept{Tool Functions}
