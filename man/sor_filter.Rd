% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sor_filter.R
\name{sor_filter}
\alias{sor_filter}
\title{Statistical outlier removal filter}
\usage{
sor_filter(
  sky_points,
  r = NULL,
  k = 20,
  rmax = 20,
  thr = 2,
  cutoff_side = "both"
)
}
\arguments{
\item{sky_points}{The \emph{data.frame} returned by \code{\link[=extract_rl]{extract_rl()}} or a
\emph{data.frame} with same structure and names.}

\item{r}{\linkS4class{SpatRaster}. An image with the same raster grid as the one
from which \code{sky_points} was obtained. If \code{NULL} is provided instead, the
\code{dn} column from the \code{sky_points} argument will be used.}

\item{k}{Numeric vector of length one. Number of k-nearest neighbors.}

\item{rmax}{Numeric vector of length one. The maximum radius for searching
k-nearest neighbors (knn). Points are projected onto a unit-radius sphere,
similar to the use of relative radius in image mapping. The spherical
distance is then calculated and used to filter out points farther than
\code{rmax}. The distance is expressed in degrees.}

\item{thr}{Numeric vector of length one. See
\insertCite{Leys2013;textual}{rcaiman}.}

\item{cutoff_side}{Character vector of length one. See
\insertCite{Leys2013;textual}{rcaiman}.}
}
\value{
Logical vector of length equal to the number of row of argument
\code{sky_points}.
}
\description{
Statistical outlier removal filter
}
\examples{
\dontrun{
caim <- read_caim()
r <- caim$Blue
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)
m <- !is.na(z)
bin <- regional_thresholding(r, rings_segmentation(z, 30),
                             method = "thr_isodata")
bin <- bin & mask_hs(z, 0, 80)
g <- sky_grid_segmentation(z, a, 5, first_ring_different = TRUE)
sky_points <- extract_sky_points(r, bin, g,
                                 dist_to_plant = 3,
                                 min_raster_dist = 10)
plot(r)
points(sky_points$col, nrow(caim) - sky_points$row, col = "green", pch = 10)
sky_points <- extract_rl(r, z, a, sky_points, no_of_points = NULL)
i <- sor_filter(sky_points$sky_points, k = 5, rmax = 20, thr = 2,
                cutoff_side = "left")
sky_points <- sky_points$sky_points[!i, c("row", "col")]
points(sky_points$col, nrow(caim) - sky_points$row, col = "red",
       pch = "X", cex = 1.5)
}
}
\references{
\insertAllCited{}
}
\seealso{
Other Tool Functions: 
\code{\link{calc_oor_index}()},
\code{\link{calc_sngd}()},
\code{\link{colorfulness}()},
\code{\link{correct_vignetting}()},
\code{\link{defuzzify}()},
\code{\link{expand_sky_points}()},
\code{\link{extract_dn}()},
\code{\link{extract_feature}()},
\code{\link{extract_rl}()},
\code{\link{extract_sky_points}()},
\code{\link{extract_sun_coord}()},
\code{\link{find_general_sky_type}()},
\code{\link{find_sky_pixels}()},
\code{\link{masking}()},
\code{\link{optim_normalize}()},
\code{\link{percentage_of_clipped_highlights}()},
\code{\link{read_bin}()},
\code{\link{read_caim}()},
\code{\link{read_caim_raw}()},
\code{\link{read_ootb_sky_model}()},
\code{\link{write_bin}()},
\code{\link{write_caim}()},
\code{\link{write_ootb_sky_model}()}
}
\concept{Tool Functions}
