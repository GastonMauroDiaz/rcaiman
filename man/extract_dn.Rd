% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_dn.R
\name{extract_dn}
\alias{extract_dn}
\title{Extract digital numbers}
\usage{
extract_dn(r, img_points, use_window = TRUE, fun = NULL)
}
\arguments{
\item{r}{\linkS4class{SpatRaster}. A fish-eye image.}

\item{img_points}{The output of \code{\link[=extract_sky_points]{extract_sky_points()}},
or an object of the same class and structure.}

\item{use_window}{Logical vector of length one. If \code{TRUE}, a \eqn{3 \times 3}
window will be used to extract the digital number from \code{r}.}

\item{fun}{A \code{function} that takes a vector as input and returns a
one-length numeric or logical vector as output (e.g. mean).}
}
\value{
An object of the class \emph{data.frame}. It is the argument
\code{img_points} with an added column per each layer from \code{r}. The
layer names are used to name the new columns. If a function is provided as
the \code{fun} argument, the result will be summarized per column using the
provided function, and the \emph{row} and \emph{col} information will be
omitted. Moreover, if \code{r} is an RGB image, a \linkS4class{color} will
be returned instead of a \emph{data.frame}. The latter feature is useful
for obtaining  the \code{sky_blue} argument for \code{\link[=enhance_caim]{enhance_caim()}}.
}
\description{
Wrapper function around \code{\link[terra:extract]{terra::extract()}}.
}
\note{
The \href{https://imagej.net/ij/docs/guide/146-19.html#sec:Multi-point-Tool}{point selection tool of ‘ImageJ’ software}
can be used to manually digitize points and create a CSV file from which to read
coordinates (see Examples). After digitizing the points on the image, use the
dropdown menu Analyze>Measure to open the Results window. To obtain the CSV
file, use File>Save As...
}
\examples{
\dontrun{
caim <- read_caim()
r <- caim$Blue
bin <- apply_thr(r, thr_isodata(r[]))
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)
g <- sky_grid_segmentation(z, a, 10)
sky_points <- extract_sky_points(r, bin, g)
sky_points <- extract_dn(caim, sky_points)
head(sky_points)

# See fit_cie_sky_model() for details on below file
path <- system.file("external/sky_points.gpkg",
                    package = "rcaiman")
sky_points <- terra::vect(path)
sky_points <- terra::extract(caim, sky_points, cells = TRUE)
sky_points <- terra::rowColFromCell(caim, sky_points$cell) \%>\%
  as.data.frame()
colnames(sky_points) <- c("row", "col")
head(sky_points)
plot(caim$Blue)
points(sky_points$col, nrow(caim) - sky_points$row, col = 2, pch = 10)

bin <- regional_thresholding(r, rings_segmentation(z, 15), "thr_isodata")
bin <- bin & mask_hs(z, 0, 85)
mx <- optim_normalize(caim, bin)
caim <- normalize(caim, mx = mx, force_range = TRUE)
m <- !is.na(z)

sky_blue <- extract_dn(caim, sky_points, fun = median)
as(sky_blue, "polarLAB")
ecaim <- enhance_caim(caim, m, sky_blue = sky_blue)
plot(ecaim)
.refine_sky_blue <- function(chroma) {
  ecaim <- enhance_caim(caim, m, polarLAB(50, chroma, 293))
  z <- -extract_dn(ecaim, sky_points, fun = sum)
  if (is.na(z)) z <- 0
  z
}
chroma <- seq(0, 1, 0.05) * 100
z <- Map(.refine_sky_blue, chroma) \%>\% unlist()
plot(chroma, z, type = "l")

fit <- bbmle::mle2(.refine_sky_blue, list(chroma = 17),
                   method = "L-BFGS-B", lower = 0, upper = 100)
fit@details$convergence
summary(fit)
fit@coef
ecaim <- enhance_caim(caim, m, polarLAB(50, 17, 293))
plot(ecaim)
apply_thr(ecaim, thr_isodata(ecaim[m])) \%>\% plot()
}
}
\seealso{
Other Tool Functions: 
\code{\link{calc_oor_index}()},
\code{\link{calc_sngd}()},
\code{\link{colorfulness}()},
\code{\link{correct_vignetting}()},
\code{\link{defuzzify}()},
\code{\link{expand_sky_points}()},
\code{\link{extract_feature}()},
\code{\link{extract_rl}()},
\code{\link{extract_sky_points}()},
\code{\link{extract_sun_coord}()},
\code{\link{find_general_sky_type}()},
\code{\link{find_sky_pixels}()},
\code{\link{masking}()},
\code{\link{optim_normalize}()},
\code{\link{percentage_of_clipped_highlights}()},
\code{\link{read_bin}()},
\code{\link{read_caim}()},
\code{\link{read_caim_raw}()},
\code{\link{read_ootb_sky_model}()},
\code{\link{sor_filter}()},
\code{\link{write_bin}()},
\code{\link{write_caim}()},
\code{\link{write_ootb_sky_model}()}
}
\concept{Tool Functions}
