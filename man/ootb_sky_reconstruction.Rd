% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ootb_sky_reconstruction.R
\name{ootb_sky_reconstruction}
\alias{ootb_sky_reconstruction}
\title{Out-of-the-box sky reconstruction}
\usage{
ootb_sky_reconstruction(
  r,
  z,
  a,
  bin,
  filling_source = NULL,
  dist_to_plant = 3,
  general_sky_type = NULL,
  twilight = TRUE,
  method = "BFGS"
)
}
\arguments{
\item{r}{\linkS4class{SpatRaster}. A normalized greyscale image. Typically, the
blue channel extracted from a canopy photograph. Please see \code{\link[=read_caim]{read_caim()}}
and \code{\link[=normalize]{normalize()}}.}

\item{z}{\linkS4class{SpatRaster} built with \code{\link[=zenith_image]{zenith_image()}}.}

\item{a}{\linkS4class{SpatRaster} built with \code{\link[=azimuth_image]{azimuth_image()}}.}

\item{bin}{\linkS4class{SpatRaster}. This should be a preliminary binarization of
\code{r} useful for masking pixels that are very likely pure sky pixels.}

\item{filling_source}{\linkS4class{SpatRaster}. An actual or reconstructed
above-canopy image to complement the sky pixels detected through the gaps
of \code{r}. If an incomplete above-canopy image is available, non-sky
pixels should be turned \code{NA} or they will be considered as sky pixels
erroneously. A photograph taken immediately after or before taking \code{r}
under the open sky with the same equipment and configuration is a very good
option but not recommended under fleeting clouds. The orientation relative
to the North must be the same as for \code{r}. If it is set to \code{NULL}
(default), only sky pixels from \code{r} will be used as input.}

\item{dist_to_plant}{Numeric vector of length one or \code{NULL}. See
\code{\link[=extract_sky_points]{extract_sky_points()}}.}

\item{general_sky_type}{Character vector of length one. It could be any of
these: "Overcast", "Clear", or "Partly cloudy". See Table 1 from
\insertCite{Li2016;textual}{rcaiman} for additional details.}

\item{twilight}{Logical vector of length one. If it is \code{TRUE} and the initial
standard parameters belong to the "Clear" general sky type, sun zenith
angles from 90 to 96 degrees will be tested (civic twilight). This is
necessary since \code{\link[=extract_sun_coord]{extract_sun_coord()}} would mistakenly recognize the center
of what can be seen of the solar corona as the solar disk.}

\item{method}{Optimization method to use. See \code{\link{optim}}.}
}
\value{
If a filling source is not provided, the result is an object from the
class \emph{list} that includes the following: (1) the reconstructed sky
(\linkS4class{SpatRaster}), (2) the output produced by \code{\link[=fit_cie_sky_model]{fit_cie_sky_model()}}, (3)
the out-of-range index (see \code{\link[=fit_cie_sky_model]{fit_cie_sky_model()}}), (4) sky points that
were not involved in obtaining (2), (5) an object from the class \code{lm} (see
\code{\link[stats:lm]{stats::lm()}}) that is the result of validating (1) with (4) and the method
recommended by \insertCite{Pineiro2008;textual}{rcaiman}, and (6) a
binarized image produced with (1) and the coefficients from (4). If a
filling source is provided, only a reconstructed sky (\linkS4class{SpatRaster})
is returned.
}
\description{
Build an above canopy image from a single below canopy image
}
\details{
This function is a hard-coded version of a pipeline that uses these main
functions \code{\link[=fit_cie_sky_model]{fit_cie_sky_model()}} and \code{\link[=interpolate_sky_points]{interpolate_sky_points()}}.

The pipeline is an automatic version of the
\insertCite{Lang2010;textual}{rcaiman} method.

Providing a \verb{filling source} triggers an alternative pipeline in which the
sky is fully reconstructed with \code{\link[=interpolate_sky_points]{interpolate_sky_points()}} after a dense
sampling (\eqn{1 \times 1} degree cells), which is supported by the fact that
sky digital numbers will be available for almost every pixel, either from \code{r}
gaps or from the filling source---an exception is a filling source with
plenty of \code{NA} values, which should not be provided.
}
\examples{
\dontrun{
caim <- read_caim() \%>\% normalize()
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)

path <- system.file("external/sky_points.csv",
                    package = "rcaiman")
sky_points <- read.csv(path)
sky_points <- sky_points[c("Y", "X")]
colnames(sky_points) <- c("row", "col")
sky_blue <- extract_dn(caim, sky_points, fun = median)

bin <- ootb_obia(caim, z, a, sky_blue = sky_blue, gamma = NULL)
plot(bin)
set.seed(7)
sky <- ootb_sky_reconstruction(caim$Blue, z, a, bin)
sky$validation \%>\% summary()

plot(sky$sky)
plot(caim$Blue/sky$sky)
hist(caim$Blue/sky$sky, xlim = c(0, 2), breaks = 255)
hist((caim$Blue/sky$sky)[bin], xlim = c(0, 2), breaks = 255)
plot((caim$Blue/sky$sky)>1.1)

plot(sky$bin)

sky2 <- ootb_sky_reconstruction(caim$Blue, z, a, sky$bin, sky$sky)
plot(sky2)
plot(caim$Blue/sky2)
hist(caim$Blue/sky2, xlim = c(0, 2), breaks = 255)
hist((caim$Blue/sky2)[sky$bin], xlim = c(0, 2), breaks = 255)
plot((caim$Blue/sky2)>1.1)
}
}
\references{
\insertAllCited{}
}
\seealso{
Other Sky Reconstruction Functions: 
\code{\link{cie_sky_model_raster}()},
\code{\link{extract_sun_coord}()},
\code{\link{fit_cie_sky_model}()},
\code{\link{fit_coneshaped_model}()},
\code{\link{fit_trend_surface}()},
\code{\link{fix_reconstructed_sky}()},
\code{\link{interpolate_sky_points}()}
}
\concept{Sky Reconstruction Functions}
