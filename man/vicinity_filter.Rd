% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vicinity_filter.R
\name{vicinity_filter}
\alias{vicinity_filter}
\title{Vicinity filter for planar and spherical coordinates}
\usage{
vicinity_filter(sky_points, space, thr, prefer = NULL)
}
\arguments{
\item{sky_points}{The output of \code{\link[=extract_sky_points]{extract_sky_points()}}
or an object of the same class and structure.}

\item{space}{Numeric vector of length one. Either \code{"planar"} or
\code{"spherical"}.}

\item{thr}{Numeric vector of length one. Minimum allowed distance between
points. In degrees for spherical space or pixels for planar space.}

\item{prefer}{Character vector of length one or \code{NULL}. Optional. Name of
column whose higher values are to be prioritized during selection.}
}
\value{
The argument \code{sky_points} with fewer rows due to the removal of
points closer each other than \code{thr}.
}
\description{
Filters out nearby points based on a minimum distance threshold in either
planar (image space) or spherical (sky coordinates) systems.
}
\details{
This function selects a subset of spatial points ensuring that no selected
points are closer than \code{thr}. Useful for obtaining well-distributed samples.
}
\examples{
\dontrun{
caim <- read_caim()
r <- caim$Blue
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)
m <- !is.na(z)
bin <- regional_thresholding(r, rings_segmentation(z, 30),
                             method = "thr_isodata")
bin <- bin & select_sky_vault_region(z, 0, 80)
g <- sky_grid_segmentation(z, a, 5, first_ring_different = TRUE)
sky_points <- extract_sky_points(r, bin, g,
                                 dist_to_black = 3)

sky_points_p <- vicinity_filter(sky_points, "planar", 100)
plot(r)
points(sky_points$col, nrow(caim) - sky_points$row, col = 2, pch = 10)
points(sky_points_p$col, nrow(caim) - sky_points_p$row, col = 3, pch = 0)

rr <- extract_rel_radiance(r, z, a, sky_points)
sky_points_s <- vicinity_filter(rr$sky_points, "spherical", 30)
plot(r)
points(sky_points$col, nrow(caim) - sky_points$row, col = 2, pch = 10)
points(sky_points_s$col, nrow(caim) - sky_points_s$row, col = 3, pch = 0)
}
}
\seealso{
Other Tool Functions: 
\code{\link{calc_oor_index}()},
\code{\link{colorfulness}()},
\code{\link{correct_vignetting}()},
\code{\link{defuzzify}()},
\code{\link{display_caim}()},
\code{\link{extract_dn}()},
\code{\link{extract_feature}()},
\code{\link{extract_rel_radiance}()},
\code{\link{extract_sky_points}()},
\code{\link{extract_sun_coord}()},
\code{\link{find_sky_pixels}()},
\code{\link{masking}()},
\code{\link{optim_dist_to_black}()},
\code{\link{optim_normalize}()},
\code{\link{percentage_of_clipped_highlights}()},
\code{\link{read_bin}()},
\code{\link{read_caim}()},
\code{\link{read_caim_raw}()},
\code{\link{read_ootb_sky_model}()},
\code{\link{sor_filter}()},
\code{\link{write_bin}()},
\code{\link{write_caim}()},
\code{\link{write_ootb_sky_model}()}
}
\concept{Tool Functions}
