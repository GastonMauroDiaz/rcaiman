% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_trend_surface.R
\name{fit_trend_surface}
\alias{fit_trend_surface}
\title{Fit a trend surface to sky digital numbers}
\usage{
fit_trend_surface(r, z, a, bin, filling_source = NULL, np = 6)
}
\arguments{
\item{r}{\linkS4class{SpatRaster}. A normalized greyscale image. Typically, the
blue channel extracted from a canopy photograph. Please see \code{\link[=read_caim]{read_caim()}}
and \code{\link[=normalize]{normalize()}}.}

\item{z}{\linkS4class{SpatRaster} built with \code{\link[=zenith_image]{zenith_image()}}.}

\item{a}{\linkS4class{SpatRaster} built with \code{\link[=azimuth_image]{azimuth_image()}}.}

\item{bin}{\linkS4class{SpatRaster}. This should be a preliminary binarization of
\code{r} useful for masking pixels that are very likely pure sky pixels.}

\item{filling_source}{\linkS4class{SpatRaster}. An actual or reconstructed
above-canopy image to complement the sky pixels detected through the gaps
of \code{r}. A photograph taken immediately after or before taking \code{r} under the
open sky with the same equipment and configuration is a very good option
but not recommended under fleeting clouds. The orientation relative to the
North must be the same as for \code{r}. If it is set to \code{NULL} (default), only
sky pixels from \code{r} will be used as input.}

\item{np}{
degree of polynomial surface
}
}
\value{
A list with an object of class \linkS4class{SpatRaster} and of class \code{trls}
(see \code{\link[spatial:surf.ls]{spatial::surf.ls()}}).
}
\description{
Fit a trend surface using \code{\link[spatial:surf.ls]{spatial::surf.ls()}} as workhorse function.
}
\details{
This function is meant to be used after \code{\link[=fit_coneshaped_model]{fit_coneshaped_model()}}.

This method was presented in \insertCite{Diaz2018;textual}{rcaiman}, under
the heading \emph{Estimation of the sky DN as a previous step for our method}. If
you use this function in your research, please cite that paper in addition to
this package (\verb{citation("rcaiman"}).
}
\note{
If an incomplete above-canopy image is available as filling source,
non-sky pixels should be turned \code{NA} or they will be erroneously considered
as sky pixels.
}
\examples{
\dontrun{
path <- system.file("external/DSCN4500.JPG", package = "rcaiman")
caim <- read_caim(path, c(1250, 1020) - 745, 745 * 2, 745 * 2)
z <- zenith_image(ncol(caim), lens("Nikon_FCE9"))
a <- azimuth_image(z)
r <- gbc(caim$Blue)
r <- correct_vignetting(r, z, c(0.0638, -0.101)) \%>\% normalize()

bin <- regional_thresholding(r, rings_segmentation(z, 30), "thr_isodata")
bin <- bin & select_sky_vault_region(z, 0, 80)
sky_points <- extract_sky_points(r, bin, sky_grid_segmentation(z, a, 3))
sky_points <- extract_rel_radiance(r, z, a, sky_points, no_of_points = NULL)

model <- fit_coneshaped_model(sky_points$sky_points)
summary(model$model)
sky_cs <- model$fun(z, a)
plot(sky_cs)
plot(r/sky_cs)

sky_s <- fit_trend_surface(r, z, a, bin, sky_cs)$image
plot(sky_s)
plot(r/sky_s)
}
}
\references{
\insertAllCited{}
}
\seealso{
\code{\link[=thr_mblt]{thr_mblt()}}

Other Sky Reconstruction Functions: 
\code{\link{cie_sky_image}()},
\code{\link{fit_cie_sky_model}()},
\code{\link{fit_coneshaped_model}()},
\code{\link{interpolate_and_merge}()},
\code{\link{interpolate_sky_points}()},
\code{\link{ootb_fit_cie_sky_model}()}
}
\concept{Sky Reconstruction Functions}
