% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polar_qtree_strict.R
\name{polar_qtree_strict}
\alias{polar_qtree_strict}
\title{Polar Quadtree Segmentation with Optional Parallelism}
\usage{
polar_qtree_strict(
  r,
  z,
  a,
  m,
  scale_parameter,
  angle_width,
  min_size_px = 0,
  parallel = FALSE,
  diagnose = FALSE
)
}
\arguments{
\item{r}{A \code{SpatRaster} of data values to segment.}

\item{z}{A \code{SpatRaster} of the same dimension giving the zenith angle for each cell.}

\item{a}{A \code{SpatRaster} of the same dimension giving the azimuth angle for each cell (in degrees).}

\item{scale_parameter}{Numeric threshold; a segment is split only if
(sd_parent - sum(sd_children)) > \code{scale_parameter}.}

\item{angle_width}{Base angular resolution (in degrees) for zenith and azimuth bands.}

\item{parallel}{Logical. If TRUE, perform segmentation in parallel. Requires a \code{foreach} backend (e.g. via \code{doParallel}).}

\item{diagnose}{Logical. To explore a viable value for the scale parameter}
}
\value{
A \code{SpatRaster} of the same size as \code{r}, where each cellâ€™s value is an integer ID of its segment.
}
\description{
This function segments a raster \code{r} in polar coordinates into circular trapezoid cells
(defined by zenith and azimuth angle bands). Segments are recursively subdivided
if splitting reduces the overall standard deviation of \code{r}-values by more than
\code{scale_parameter}. Symmetric angular resolution is maintained (each split divides angles equally).
}
\details{
The raster is first converted to plain vectors (\code{terra::values}) of cell values and angles.
Segments are represented by (z_min,z_max,azim_min,azim_max) and split into four by halving angles.
Standard deviation is used as the split criterion. The final segmentation is applied
via \code{terra::setValues} to create the output raster.
}
\examples{
\dontrun{
caim <- read_caim()
z <- zenith_image(ncol(caim), lens())
a <- azimuth_image(z)
m <- !is.na(z)
com <- compute_complementary_gradients(caim/sky)
chroma <- max(com$blue_yellow, com$cyan_red)
seg <- polar_qtree_strict(chroma, z, a, m, 0.2, 30, 50, FALSE)
}
}
